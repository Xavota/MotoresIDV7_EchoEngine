/************************************************************************/
/**
 * @file eeSceneManager.h
 * @author Diego Castellanos
 * @date 24/11/21
 * @brief
 * The manager for all the scenes.
 *
 * @bug Not bug Known.
 */
/************************************************************************/

#pragma once
#include "eePrerequisitesCore.h"
#include <eeModule.h>

#include "eeScene.h"
#include "eeOctree.h"

namespace eeEngineSDK{
/**
 * @brief
 * The manager for all the scenes.
 */
class EE_CORE_EXPORT SceneManager : public Module<SceneManager>
{
 public:
  /**
   * @brief
   * Default constructor.
   */
  SceneManager() = default;
  /**
   * @brief
   * Default destructor.
   */
  ~SceneManager();

  /**
   * @brief
   * Updates the manager.
   *
   * @description
   * Updates the manager and all the scenes.
   */
  void
  update();

  /**
   * @brief
   * Adds a new scene.
   *
   * @description
   * Adds and initializes a new scene with its identifying name.
   *
   * @param name
   * The identifying name of the new scene.
   *
   * @return
   * The ptr to the new scene.
   */
  WPtr<Scene>
  addScene(const String& name);
  /**
   * @brief
   * Gets a scene.
   *
   * @description
   * Gets scene with its identifying name.
   *
   * @param name
   * The identifying name of the looking scene.
   *
   * @return
   * The ptr to the scene, nullptr if not found.
   */
  WPtr<Scene>
  getScene(const String& name);
  /**
   * @brief
   * Saves all the scenes.
   *
   * @description
   * Serializes all scenes in their own files.
   */
  void
  saveAllScenes();
  /**
   * @brief
   * Saves all the currently active scenes.
   *
   * @description
   * Serializes all scenes in their own files that are currently active on the
   * editor.
   */
  void
  saveActiveScenes();
  /**
   * @brief
   * Saves a scenes.
   *
   * @description
   * Serializes a scenes in their own file.
   *
   * @param name
   * The identifying name of the saving scene.
   */
  void
  saveScene(const String& name);
  /**
   * @brief
   * Load a scenes.
   *
   * @description
   * Loads a scenes file.
   *
   * @param filePath
   * The path of the scene file to load.
   */
  void
  loadScene(const WString& filePath);
  /**
   * @brief
   * Unload all scenes from the memory.
   *
   * @description
   * Unloads all scenes from the memory, so they are not running.
   */
  void
  unloadAllScene();
  /**
   * @brief
   * Unload a scene from the memory.
   *
   * @description
   * Unloads a scene from the memory, so it is not running.
   *
   * @param name
   * The name of the scene to unload.
   */
  void
  unloadScene(const String& name);

  /**
   * @brief
   * Gets all actors of all active scenes inside the camera.
   *
   * @description
   * Gets all actors of all active scenes that are inside the frustum of the
   * camera and have a model and a render component.
   *
   * @param camera
   * The camera to check the frustum.
   *
   * @return
   * All actors inside.
   */
  Vector<WPtr<Actor>>
  getAllRenderableActorsInside(WPtr<CCamera> camera,
                     eRENDER_ACTOR_FLAGS::E flags = eRENDER_ACTOR_FLAGS::kNone);

  /**
   * @brief
   * Gets all scenes.
   *
   * @description
   * Returns the maps of scenes.
   *
   * @return
   * All scenes.
   */
  FORCEINLINE const Map<String, SPtr<Scene>>&
  getAllScenes()
  {
    return m_scenes;
  }
  /**
   * @brief
   * Gets the first active scene.
   *
   * @description
   * Returns the first active scene..
   *
   * @return
   * The first active scene..
   */
  WPtr<Scene>
  getActiveScene();
  /**
   * @brief
   * Gets all actors with the given components.
   *
   * @description
   * Returns an array of actors that have at least one component on the flags
   * list.
   * 
   * @param flags
   * The component list in form of flags.
   *
   * @return
   * An array of actors that have at least one component on the flags list.
   */
  Vector<SPtr<Actor>>
  getAllActorsByComponentFlags(uint32 flags);

  /**
   * @brief
   * Partitions s scene.
   *
   * @description
   * Partitions a scene using an Octree to make separate the triangles in
   * nodes.
   */
  void
  partitionScene(const String& name);
  /**
   * @brief
   * Partitions the scenes.
   *
   * @description
   * Partitions the scenes using an Octree to make separate the triangles in
   * nodes.
   */
  void
  partitionAllScenes();
  /**
   * @brief
   * Getter for the meshes generated by the partition of the scene.
   *
   * @description
   * Returns the meshes that where created by the partition of the scenes.
   * 
   * @param meshesVec
   * The output vector of meshes.
   */
  void
  getPartitionedSceneMeshes(Vector<WPtr<StaticMesh>>& outMeshesVec);


 private:
  /**
   * All the scenes.
   */
  Map<String, SPtr<Scene>> m_scenes;
  /**
   * The partition of the space on the scene.
   */
  Octree m_spacePartition;
};
}
